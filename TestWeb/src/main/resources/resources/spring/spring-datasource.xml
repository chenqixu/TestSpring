<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans.xsd
 http://www.springframework.org/schema/context
 http://www.springframework.org/schema/context/spring-context.xsd
 http://www.springframework.org/schema/tx
 http://www.springframework.org/schema/tx/spring-tx.xsd">

    <description>spring-datasource</description>
    <context:property-placeholder location="classpath:resources/spring/jdbc.properties"/>
    <!-- 监控数据输出到日志中 -->
    <bean id="slf4j-filter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
        <property name="statementExecutableSqlLogEnable" value="true"/>
    </bean>
    <!-- 监控查询时长超过30秒的sql，单位：毫秒 -->
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="slowSqlMillis" value="30000"/>
        <property name="logSlowSql" value="true"/>
    </bean>

    <!-- ################################################ -->
    <!-- db -->
    <bean id="abstractDataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.db.driver}"/>
        <!-- 连接池连接数初始值 -->
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <!-- 连接池最大连接数量 -->
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <!-- 连接池最大空闲值，释放多余的不用的连接，释放到多少为止, 新版本该参数已弃用 -->
        <!--<property name="maxIdle" value="${jdbc.maxIdle}"/>-->
        <!-- 连接池最小空闲值，当空闲连接数小于这个数的时候，连接池就会去申请一些连接以免高峰期来不及申请 -->
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <!-- 获取连接时最大等待时间，单位毫秒。 -->
        <property name="maxWait" value="${jdbc.maxWait}"/>
        <!-- 是否缓存preparedStatement，支持游标的数据库有性能提升。 -->
        <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>
        <!-- 配置一个连接在池中最大生存的时间，单位是毫秒 -->
        <!--<property name="maxEvictableIdleTimeMillis" value="${jdbc.maxEvictableIdleTimeMillis}"/>-->
        <property name="validationQuery" value="${jdbc.db.validationQuery}"/>
        <property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
        <property name="testOnReturn" value="${jdbc.testOnReturn}"/>
        <!-- 连接池中的 minIdle 数量以内的连接，空闲时间超过 minEvictableIdleTimeMillis，则会执行 keepAlive 操作。-->
        <property name="keepAlive" value="true"/>
        <!-- 配置监控统计拦截的 filters Druid 连接池的监控信息主要是通过 StatFilter 采集的，
        采集的信息非常全面，包括 SQL 执行、并发、慢查、执行时间区间分布等-->
        <!-- stat：Druid内置提供一个StatFilter,用于统计监控信息 -->
        <!-- wall：Druid防御SQL注入攻击的WallFilter就是通过Druid的SQL Parser分析。
        Druid提供的SQL Parser可以在JDBC层拦截SQL做相应处理，比如说分库分表、审计等。-->
        <!-- log4j2：这个就是 日志记录的功能，可以把sql语句打印到log4j2 供排查问题。-->
        <!-- 配置监控统计拦截的filters -->
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter"/>
                <ref bean="slf4j-filter"/>
            </list>
        </property>
    </bean>

    <!-- 数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close"
          parent="abstractDataSource">
        <property name="url" value="${jdbc.db.url}"/>
        <property name="username" value="${jdbc.db.username}"/>
        <property name="password" value="${jdbc.db.password}"/>
    </bean>

    <!--配置jdbcTemplate -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg ref="dataSource"/>
    </bean>

    <!-- 配置namedParameterJdbcTemplate -->
    <bean id="namedParameterJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
        <constructor-arg ref="dataSource"/>
    </bean>

    <!-- ################################################ -->
    <!-- 提供对lob字段的支持 -->
    <bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" lazy-init="true"/>

    <!-- 配置声明式的事务管理（採用基于注解的方式） -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 注解驱动的事务管理器 -->
    <tx:annotation-driven transaction-manager="txManager"/>
</beans>
